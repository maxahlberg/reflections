Lesson 2 reflections


What happens when you initialize a repository? Why do you need to do it?

	-When I initialize a repository I create a .git file that tracks all
	"snapshots" of the versions that I have commited. I need to do this 
	to be able to keep track of my previous work

How is the staging area different from the working directory and the repository? What value do you think it offers?

	-The staging area handels what you want to save in your next commit. Then you know what you can
	comment for your specific commit.

How can you use the staging area to make sure you have one commit per logical change?
	-You can compare your stating area to both the working directory and the last commit
	 this way it is much easier to know what to include in your next commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	-Some situations when  branching is helpfull is when 
		1. You want to save one working version of the project you are working on
		2. You want to make an experimental change, and before you know it is working you want to keep one working version up
	It will help me be able to work on different ideas within the same type of file wihtout having to make a loads of different documents.

How do the diagrams help you visualize the branch structure?
	-I makes it possible to understand the structure of the branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	-When we merge two branches together Git compares the branches' parents and add the wanted changes to the merge file. The merge file now have all the wanted changes from both branches and will hopefully work fine. Since it is merging two branches thats why we link the two branches together in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	- When git knows that the changes is a wanted change it automatically includes it to the merged version this makes you save time when merging branches instead of having to go though all the changes manually.
	The god thing with Git is that when there is a conflict, it marks it, and lets you go throgh it to merge the file the way you want it.

